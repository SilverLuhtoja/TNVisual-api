// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: projects.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const createProjects = `-- name: CreateProjects :one
INSERT INTO projects (id, name, content, description)
VALUES ($1, $2, $3, $4)
RETURNING id, name, content, description
`

type CreateProjectsParams struct {
	ID          uuid.UUID
	Name        string
	Content     json.RawMessage
	Description sql.NullString
}

func (q *Queries) CreateProjects(ctx context.Context, arg CreateProjectsParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProjects,
		arg.ID,
		arg.Name,
		arg.Content,
		arg.Description,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Content,
		&i.Description,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE name = $1
`

func (q *Queries) DeleteProject(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteProject, name)
	return err
}

const getProjects = `-- name: GetProjects :many
Select id, name, content, description from projects
`

func (q *Queries) GetProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Content,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectsByName = `-- name: GetProjectsByName :one
SELECT id, name, content, description FROM projects
WHERE name = $1
`

func (q *Queries) GetProjectsByName(ctx context.Context, name string) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectsByName, name)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Content,
		&i.Description,
	)
	return i, err
}

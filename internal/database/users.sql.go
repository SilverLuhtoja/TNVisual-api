// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package database

import (
	"context"
)

const authenticateUser = `-- name: AuthenticateUser :one
Select id, username, password, api_key from users
WHERE username = $1
`

func (q *Queries) AuthenticateUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, authenticateUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.ApiKey,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, password)
VALUES ($1, $2, $3)
RETURNING id, username, password, api_key
`

type CreateUserParams struct {
	ID       int32
	Username string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.ApiKey,
	)
	return i, err
}

const getUserByKey = `-- name: GetUserByKey :one
SELECT id, username, password, api_key FROM users
WHERE api_key = $1
`

func (q *Queries) GetUserByKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.ApiKey,
	)
	return i, err
}
